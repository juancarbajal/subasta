
ALTER PROCEDURE [dbo].[KO_SP_HISTORIAL_VENTA_QRY]
@K_ID_USR BIGINT
, @K_APODO VARCHAR(30) =''
, @K_CATEGORIA INTEGER = -1
, @K_CALIFICACION INTEGER = -1
, @K_DIAS INTEGER = -1
, @K_ESTADO INTEGER = -1 /*Estado de Calificacion*/

AS BEGIN
   SET NOCOUNT OFF
   DECLARE @V_HOY DATETIME = GETDATE();
   DECLARE @V_MAX_CALIFICAR INTEGER = (SELECT CAST(VALOR1 AS INTEGER)
 FROM KO_PARAMETRO WHERE DES = 'Dias para calificar');

   SELECT * FROM (
   SELECT COM.ID_USR AS COMPRADOR_ID
   ,COM_WEB.APODO AS COMPRADOR_APODO
   ,COM.NOM + ' ' + COM.APEL AS COMPRADOR_NOM
   ,COM.EMAIL AS COMPRADOR_EMAIL
   ,COM.FONO1 AS COMPRADOR_FONO1
   ,COM.FONO2 AS COMPRADOR_FONO2
   ,PJ.PUNTAJE AS COMPRADOR_PUNTAJE
   ,AGC.L1 AS AVISO_CATEGORIA_ID
   ,AGC.L1_NOM AS AVISO_CATEGORIA_NOM
   ,AVI.ID_AVISO AS AVISO_ID
   ,AVI.TIT AS AVISO_TIT
   ,TRA.ID_TRANSACCION AS TRANSACCION_ID
   ,TRA.FEC_REG AS TRANSACCION_FEC
   ,CONVERT(VARCHAR,TRA.FEC_REG,103) + ' ' + convert(VARCHAR,TRA.FEC_REG, 8) AS TRANSACCION_FEC_NOR
   ,TRA.ID_ESTADO_TRANSACCION  AS TRANSACCION_EST/*ESTADO DE TRANSACCION : 1 CERRADO, 3: PENDIENTE POR CALIFICAR*/
   , (SELECT CALV.ID_ESCALA
       FROM KO_CALIFICACION CALV
       WHERE CALV.ID_TRANSACCION = TRA.ID_TRANSACCION
       AND CALV.ID_USR = @K_ID_USR) AS CALIFICACION_VENDEDOR
   , (SELECT CALC.ID_ESCALA
       FROM KO_CALIFICACION CALC
       WHERE CALC.ID_TRANSACCION = TRA.ID_TRANSACCION
       AND CALC.ID_USR <> @K_ID_USR) AS CALIFICACION_COMPRADOR
   ,@V_MAX_CALIFICAR - DATEDIFF(DAY, TRA.FEC_REG, @V_HOY ) AS CALIFICACION_DIAS
   ,OFER.CANT AS OFERTA_CANTIDAD
   ,OFER.PRECIO_BASE AS OFERTA_PRECIO
   ,MON.SIMB AS OFERTA_MONEDA
   ,AVI.ID_TIPO_AVISO AS AVISO_TIPO
   FROM KO_AVISO AVI
   INNER JOIN KO_OFERTA OFER ON AVI.ID_AVISO = OFER.ID_AVISO
   INNER JOIN KO_TRANSACCION TRA ON OFER.ID_OFERTA= TRA.ID_OFERTA
/*TODAS LAS OFERTAS Q TENGAN TRANSACCION */
   INNER JOIN KO_USUARIO COM ON OFER.ID_USR = COM.ID_USR
   INNER JOIN KO_USUARIO_PORTAL COM_WEB ON COM.ID_USR = COM_WEB.ID_USR
   INNER JOIN KO_REPUTACION PJ ON COM.ID_USR = PJ.ID_USR
   INNER JOIN KO_AVISO_CATEGORIA AC ON AVI.ID_AVISO = AC.ID_AVISO
   INNER JOIN KO_AGRUPADOR AGC ON AC.ID_CATEGORIA = AGC.ID_CATEGORIA
   INNER JOIN KO_MONEDA MON ON AVI.ID_MONEDA=MON.ID_MONEDA
   WHERE AVI.ID_USR = @K_ID_USR
   AND ((TRA.ID_ESTADO_TRANSACCION = 1) or (TRA.ID_ESTADO_TRANSACCION = 3))
   AND COM_WEB.APODO LIKE  '%' + @K_APODO + '%'
   ) M
   WHERE
   (CALIFICACION_DIAS>=0  OR ( (CALIFICACION_VENDEDOR IS NOT NULL ) AND (CALIFICACION_COMPRADOR IS NOT NULL )))
   AND
       CASE WHEN @K_CATEGORIA = -1 /*Categoria*/
           THEN 1
           ELSE CASE WHEN AVISO_CATEGORIA_ID = @K_CATEGORIA
                THEN 1 ELSE 0 END
       END = 1
   AND CASE WHEN @K_CALIFICACION = -1 /*Calificacion*/
           THEN 1
           ELSE CASE WHEN M.CALIFICACION_VENDEDOR=@K_CALIFICACION
                THEN 1 ELSE 0 END
       END = 1
   AND CASE WHEN @K_DIAS = -1 /*Filtro por dias*/
           THEN 1
           ELSE CASE WHEN @K_DIAS=0
                THEN CASE WHEN CONVERT(VARCHAR,M.TRANSACCION_FEC,103)=CONVERT(VARCHAR,@V_HOY,103)
                	 THEN 1 ELSE 0 END
                ELSE CASE WHEN DATEDIFF(DAY, M.TRANSACCION_FEC, @V_HOY) <=@K_DIAS  /*Filtro por fecha*/
                     THEN 1 ELSE 0 END
           END
       END = 1
   AND CASE WHEN (@K_ESTADO = -1) /*FILTRO POR ESTADO de Calificacion*/
       THEN 1
       ELSE CASE WHEN @K_ESTADO=1
            THEN CASE WHEN M.CALIFICACION_VENDEDOR>0
                 THEN 1 ELSE 0 END
            ELSE CASE WHEN @K_ESTADO=2
                 THEN CASE WHEN M.CALIFICACION_VENDEDOR IS NULL
                      THEN 1 ELSE 0 END
                 ELSE CASE WHEN M.CALIFICACION_COMPRADOR IS NULL
                      THEN 1 ELSE 0 END
                 END
            END
        END =1
      ORDER BY CAST(M.TRANSACCION_FEC as date) DESC, COMPRADOR_APODO ASC
, convert(VARCHAR,M.TRANSACCION_FEC, 8) desc
   SET NOCOUNT OFF
END
GO


ALTER PROCEDURE [dbo].[KO_SP_OFERTA_INS]

 @K_CANT int
,@K_PRECIO_BASE decimal(10,2)
,@K_EST int
,@K_ID_USR bigint
,@K_TIPO_COMISION char
,@K_VALOR_COMISION decimal(10,2)
,@K_ESAUTOMATICA_SUB BIT
,@K_MONTO_MAXIMO DECIMAL(10,2)
,@K_ID_AVISO BIGINT

AS
/*******************************************************
*Descripcion: Store Procedure que permite registrar una aferta respetando las reglas de negocio.
*Fecha Crea: 13/03/2010
*Fecha Mod:
*Parametros: Los parametros necesarios para el registro de la compra
*Autor: Laura Mariños
*Versión: 1.0 (Kotear)
***************************************/

SET NOCOUNT ON

BEGIN

DECLARE @V_ERROR INT
,@V_MSG_ERROR NVARCHAR(MAX)
,@V_ID_OFERTA bigint
,@V_ID_OFERTA_MAX bigint
,@V_PRECIOBASE_MAX bigint
,@V_ID_TRANSACCION bigint
,@V_ID_DETALLE_TRANSACCION BIGINT
,@V_CADUCIDAD date
,@V_ID_USR BIGINT
,@V_STOCK INTEGER
,@V_EST TINYINT
,@V_RENT_COMPRAR BIT
,@V_DIAS_REG INT
,@V_CANT_COMPRAS INT
,@V_ID_TIPO_AVISO TINYINT
,@V_ID_TRANSACCION_CALIFICACION INT
,@V_MAYOR_PRECIO_BASE_VIGENTE DECIMAL(10,2)
,@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE BIGINT
,@V_TIPO_SUBASTA_OFERTA_MAYOR_PRECIO_VIGENTE BIT
,@V_MONTO_MAXIMO_VIGENTE DECIMAL(10,2)
,@PRECIO_BASE_CAL DECIMAL(10,2)
,@V_INC_SUBASTA INTEGER
,@V_PRECIO_AVISO DECIMAL(10,2)
,@V_VALOR_CAMBIO DECIMAL(10,2)
,@V_GANADOR BIGINT
,@V_PERDEDOR BIGINT
,@V_GANADOR_VIGENTE BIGINT
,@V_ID_TIPO_CAMBIO INT

	SET @V_VALOR_CAMBIO = (SELECT VALOR_CAMB from KO_TIPO_CAMBIO where fec_fin is NULL)

   	SET @V_ID_TIPO_CAMBIO = (SELECT ID_TIPO_CAMBIO from KO_TIPO_CAMBIO where fec_fin is NULL)

	EXEC KO_SP_AVISO_CADUCIDAD_QRY @K_ID_AVISO, @V_CADUCIDAD OUTPUT;

	SELECT @V_ID_USR = ID_USR, @V_STOCK = ISNULL(STOCK,0),@V_EST =EST,@V_ID_TIPO_AVISO=ID_TIPO_AVISO,@V_PRECIO_AVISO=PRECIO
	FROM KO_AVISO
	WHERE ID_AVISO = @K_ID_AVISO

    IF @V_CADUCIDAD<CONVERT(DATE,GETDATE())
	BEGIN
		SELECT 2 AS K_ERROR, 'El aviso caducó.' AS K_MSG;
		RETURN
	END

	IF (@V_ID_USR = @K_ID_USR)
	BEGIN
		SELECT 2 AS K_ERROR, 'Aviso propio.' AS K_MSG;
		RETURN
	END

	IF @V_EST>2
	BEGIN
		SELECT 2 AS K_ERROR, 'La venta de este aviso ha finalizado.' AS K_MSG;
		RETURN
	END
		IF (@V_ID_TIPO_AVISO = 1) AND (EXISTS(SELECT  * FROM KO_OFERTA WHERE ID_USR=@K_ID_USR AND ID_AVISO=@K_ID_AVISO AND CONVERT(VARCHAR,FEC_REG,103)=CONVERT(VARCHAR,GETDATE(),103)) )
	BEGIN
		SELECT 2 AS K_ERROR, 'El usuario ya ha realizado una compra en el día, del mismo articulo.' AS K_MSG;
		RETURN
	END

	IF (@V_ID_TIPO_AVISO=2) AND (@V_PRECIO_AVISO>@K_MONTO_MAXIMO)
	BEGIN
		SELECT 2 AS K_ERROR, 'El monto ofertado debe ser mayor al monto vigente.' AS K_MSG;
		RETURN
	END

	IF((@V_ID_TIPO_AVISO=1) AND ((@V_PRECIO_AVISO*@K_CANT)<>@K_PRECIO_BASE))
	BEGIN
		SELECT 2 AS K_ERROR, 'El precio base debe ser igual al precio del Aviso' AS K_MSG;
				RETURN
	END

    SET @V_DIAS_REG=(SELECT DATEDIFF(DAY,FEC_REG,GETDATE()) FROM KO_USUARIO_PORTAL WHERE ID_USR=@K_ID_USR)
    SET @V_CANT_COMPRAS=(SELECT  COUNT(1) FROM KO_OFERTA WHERE ID_USR=@K_ID_USR AND CONVERT(VARCHAR,FEC_REG,103)=CONVERT(VARCHAR,GETDATE(),103))
      IF (@V_ID_TIPO_AVISO=1)
      BEGIN
	    IF (@V_DIAS_REG>=0) AND (@V_DIAS_REG<=7) AND (@V_CANT_COMPRAS>=5 )
	    BEGIN
			SELECT 2 AS K_ERROR, 'Usted sólo puede realizar cinco compra al día.' AS K_MSG;
			RETURN
		END
		IF	(@V_DIAS_REG>7) AND (@V_CANT_COMPRAS>=15 )
		BEGIN
			SELECT 2 AS K_ERROR, 'Usted sólo puede realizar quince compras al día.' AS K_MSG;
			RETURN
		END

/*
		IF (@V_DIAS_REG>=8) AND (@V_DIAS_REG<=29) AND (@V_CANT_COMPRAS>=7)
	    BEGIN
			SELECT 2 AS K_ERROR, 'Usted sólo puede realizar siete compras al día.' AS K_MSG;
			RETURN
		END

	    IF (@V_DIAS_REG>=30)  AND (@V_CANT_COMPRAS>=15)
	    BEGIN
			SELECT 2 AS K_ERROR, 'Usted sólo puede realizar quince compras al día' AS K_MSG;
			RETURN
		END
*/
     END

     IF EXISTS(SELECT ID_USR FROM KO_USUARIO_PORTAL WHERE ((ID_ESTADO_USUARIO=4) OR (ID_ESTADO_USUARIO = 5)) AND ID_USR=@K_ID_USR)
		BEGIN
			SELECT 2 AS K_ERROR, 'Usted no puede realizar compras, su estado es suspendido o dado de baja.' AS K_MSG;
			RETURN
		END

	IF @K_CANT<0 OR  @K_CANT>1000
	BEGIN
		SELECT 2 AS K_ERROR, 'La cantidad supera los rangos permitidos en la compra.' AS K_MSG;
		RETURN
	END

	SET @V_PRECIOBASE_MAX=(SELECT MAX(PRECIO_BASE) FROM KO_OFERTA WHERE ID_AVISO=@K_ID_AVISO AND EST=1)

    IF (@V_PRECIOBASE_MAX>=@K_PRECIO_BASE) AND (@V_ID_TIPO_AVISO=2)
	BEGIN
		SELECT 2 AS K_ERROR, 'El monto ofertado dede ser mayor al monto vigente.' AS K_MSG;
		RETURN
	END

	IF @K_PRECIO_BASE>@K_MONTO_MAXIMO
	BEGIN
		SELECT 2 AS K_ERROR, 'El Precio base no puede ser mayor del monto máximo.' AS K_MSG;
		RETURN
	END
		 IF (@V_STOCK>0) AND (@V_ID_TIPO_AVISO=1)
		  BEGIN
			IF @K_CANT > @V_STOCK
			BEGIN
				SELECT 2 AS K_ERROR, 'La venta de este aviso ha finalizado.' AS K_MSG;
				RETURN
			END
		 END
	ELSE IF (@V_STOCK=0) AND (@V_ID_TIPO_AVISO=1)
		BEGIN
			UPDATE KO_AVISO SET EST=11  WHERE ID_AVISO=@K_ID_AVISO
			SELECT 2 AS K_ERROR, 'La venta de este aviso ha finalizado.' AS K_MSG;
			RETURN
		END


	BEGIN TRAN
		BEGIN TRY
		IF @V_ID_TIPO_AVISO=1 /* Venta Directa */
		BEGIN
			INSERT INTO KO_OFERTA
			(
				FEC_REG,
				CANT,
				PRECIO_BASE,
				EST,
				ID_AVISO,
				ID_USR,
				TIPO_COMISION,
				VALOR_COMISION,
				VALOR_CAMBIO,
				ESAUTOMATICA_SUB,
				MONTO_MAXIMO
			)
			VALUES
			(
				GETDATE(),
				@K_CANT,
				@K_PRECIO_BASE,
				@K_EST,
				@K_ID_AVISO,
				@K_ID_USR,
				@K_TIPO_COMISION,
				@K_VALOR_COMISION,
				@V_VALOR_CAMBIO,
				@K_ESAUTOMATICA_SUB,
				@K_MONTO_MAXIMO
			)
			SET @V_ID_OFERTA=@@IDENTITY
			INSERT INTO KO_TRANSACCION
			(
				FEC_REG,
				COMENT,
				TIPO_CAMBIO_ID,
				REGLA_COMPRADOR,
				REGLA_VENDEDOR,
				PRECIO,
				ID_ESTADO_TRANSACCION,
				ID_OFERTA
			)
			VALUES
			(
				GETDATE(),
				NULL,
				@V_ID_TIPO_CAMBIO,
				NULL,
				NULL,
				@K_PRECIO_BASE,
				3,
				@V_ID_OFERTA
			)

			SET @V_ID_TRANSACCION=@@IDENTITY

			INSERT INTO KO_TRANSACCION_CALIFICACION  			(
				REGLA_COMPRADOR,
				REGLA_VENDEDOR,
				ESTADO,
				ID_TRANSACCION
			)
			VALUES
			(
				NULL,
				NULL,
				1,
				@V_ID_TRANSACCION
			)
			SET @V_ID_TRANSACCION_CALIFICACION =@@IDENTITY
		     UPDATE KO_AVISO SET STOCK=@V_STOCK-@K_CANT WHERE ID_AVISO=@K_ID_AVISO
		     IF (@V_STOCK-@K_CANT=0)
		     	UPDATE KO_AVISO SET EST=11 WHERE ID_AVISO=@K_ID_AVISO

		END

		IF @V_ID_TIPO_AVISO=2 /*Subasta */
		BEGIN
  			SET @V_INC_SUBASTA = CONVERT(INTEGER,(SELECT VALOR1 FROM KO_PARAMETRO WHERE DES = 'Incremento de Subasta Automatica')) /*PARAMETRO DE INGREMENTO EN SUBASTA AUTOMATIVA*/
  			IF (NOT EXISTS(SELECT ID_USR FROM KO_OFERTA WHERE ID_AVISO=@K_ID_AVISO and EST=1)) /*SI ES LA PRIMERA OFERTA SE DEBE DE INGRESAR LA OFERTA COMO GANADORA*/
  			BEGIN
				IF (@K_ESAUTOMATICA_SUB=1)
		     	SET @K_PRECIO_BASE = (SELECT PRECIO FROM KO_AVISO WHERE ID_AVISO = @K_ID_AVISO);
				INSERT INTO KO_OFERTA(
					FEC_REG,
					CANT,
					PRECIO_BASE,
					EST,
					ID_AVISO,
					ID_USR,
					TIPO_COMISION,
					VALOR_COMISION,
					VALOR_CAMBIO,
					ESAUTOMATICA_SUB,
					MONTO_MAXIMO,
					GANADOR_SUBASTA
				)
				VALUES
				(
					GETDATE(),
					@K_CANT,
					@K_PRECIO_BASE,
					@K_EST,
					@K_ID_AVISO,
					@K_ID_USR,
					@K_TIPO_COMISION,
					@K_VALOR_COMISION,
					@V_VALOR_CAMBIO,
					@K_ESAUTOMATICA_SUB,
					@K_MONTO_MAXIMO,
					1
	            )
                SET @V_ID_OFERTA = @@IDENTITY
                /*GANADORES Y PERDEDORES*/
                SET @V_GANADOR = @K_ID_USR
                SET @V_PERDEDOR = NULL
			END
			ELSE
			BEGIN
                DECLARE @V_GANADOR_SUBASTA BIT;
			/*EXTRAEMOS LA OFERTA ACTUAL GANADORA */
/*     		    SELECT TOP 1  @V_ID_OFERTA_MAYOR_PRECIO_VIGENTE = ID_OFERTA,*/
     		    SELECT @V_ID_OFERTA_MAYOR_PRECIO_VIGENTE = ID_OFERTA,
				@V_MAYOR_PRECIO_BASE_VIGENTE =PRECIO_BASE,
				@V_TIPO_SUBASTA_OFERTA_MAYOR_PRECIO_VIGENTE = ESAUTOMATICA_SUB,
				@V_MONTO_MAXIMO_VIGENTE	= MONTO_MAXIMO,
                @V_GANADOR_VIGENTE = ID_USR
				FROM KO_OFERTA WHERE ID_AVISO=@K_ID_AVISO
				AND EST=1
				AND GANADOR_SUBASTA=1;
				/*ORDER BY PRECIO_BASE;*/

				IF @V_TIPO_SUBASTA_OFERTA_MAYOR_PRECIO_VIGENTE=0 				/*OFERTA FIJA*/
				BEGIN
					IF @K_ESAUTOMATICA_SUB=0 					/*UNA OFERTA FIJA INGRESADA*/
					BEGIN
					/*
					* TODAS LAS SUBASTAS PIERDEN EXCEPTO LA ULTIMA INGRESADA - POR VALIDACION ESTA OFERTA DEBE SER MAYOR Q LA OFERTA ACTUAL GANADORA
					*/
						UPDATE KO_OFERTA SET GANADOR_SUBASTA=0 WHERE ID_AVISO = @K_ID_AVISO AND GANADOR_SUBASTA=1;
						INSERT INTO KO_OFERTA(
							FEC_REG,
							CANT,
							PRECIO_BASE,
							EST,
							ID_AVISO,
							ID_USR,
							TIPO_COMISION,
							VALOR_COMISION,
							VALOR_CAMBIO,
							ESAUTOMATICA_SUB,
							MONTO_MAXIMO,
							GANADOR_SUBASTA
						)
						VALUES
						(
							GETDATE(),
							@K_CANT,
							@K_PRECIO_BASE,
							/*@PRECIO_BASE_CAL,*/
							@K_EST,
							@K_ID_AVISO,
							@K_ID_USR,
							@K_TIPO_COMISION,
							@K_VALOR_COMISION,
							@V_VALOR_CAMBIO,
							@K_ESAUTOMATICA_SUB,
							@K_MONTO_MAXIMO,
							1
						)
                        SET @V_ID_OFERTA = @@IDENTITY
                        /*GANADORES Y PERDEDORES*/
                        SET @V_GANADOR = @K_ID_USR
                        SET @V_PERDEDOR = @V_GANADOR_VIGENTE

					END
					ELSE IF  @K_ESAUTOMATICA_SUB=1	  					/*INGRESAMOS UNA OFERTA AUTOMATICA - SERA LA NUEVA GANADORA */
					BEGIN
					     IF @V_MAYOR_PRECIO_BASE_VIGENTE+@V_INC_SUBASTA <=@K_MONTO_MAXIMO
					     BEGIN
							SET @PRECIO_BASE_CAL = @V_MAYOR_PRECIO_BASE_VIGENTE+@V_INC_SUBASTA
						END
						ELSE BEGIN
							SET @PRECIO_BASE_CAL = @K_MONTO_MAXIMO
						END
						UPDATE KO_OFERTA SET GANADOR_SUBASTA=0 WHERE ID_AVISO = @K_ID_AVISO AND GANADOR_SUBASTA=1; /*LA NUEVA OFERTA ES LA GANADORA*/
						INSERT INTO KO_OFERTA
						(
							FEC_REG,
							CANT,
							PRECIO_BASE,
							EST,
							ID_AVISO,
							ID_USR,
							TIPO_COMISION,
							VALOR_COMISION,
							VALOR_CAMBIO,
							ESAUTOMATICA_SUB,
							MONTO_MAXIMO,
							GANADOR_SUBASTA
						)
						VALUES
						 (
							GETDATE(),
							@K_CANT,
							@PRECIO_BASE_CAL,
							@K_EST,
							@K_ID_AVISO,
							@K_ID_USR,
							@K_TIPO_COMISION,
							@K_VALOR_COMISION,
							@V_VALOR_CAMBIO,
							@K_ESAUTOMATICA_SUB,
							@K_MONTO_MAXIMO,
							1
						)
                        SET @V_ID_OFERTA = @@IDENTITY
                        /*GANADORES Y PERDEDORES*/
                        SET @V_GANADOR = @K_ID_USR
                        SET @V_PERDEDOR = @V_GANADOR_VIGENTE
					END
					END
					ELSE IF @V_TIPO_SUBASTA_OFERTA_MAYOR_PRECIO_VIGENTE=1  /*SI LA OFERTA GANADORA ACTUAL ES AUTOMATICA*/
					BEGIN

						IF @K_ESAUTOMATICA_SUB=0 /*NUEVA OFERTA ES FIJA- VERIFICAMOS SI LA AUTOMATICA PUEDE PASAR A LA FIJA */
						BEGIN
							IF @V_MONTO_MAXIMO_VIGENTE>@K_PRECIO_BASE /*SI LA ACTUAL OFERTA GANADORA PUEDE CUBRIR LA NUEVA OFERTA - ERA >= */
							BEGIN
								IF @K_PRECIO_BASE+@V_INC_SUBASTA>@V_MONTO_MAXIMO_VIGENTE /*SI LA NUEVA OFERTA ES MAYOR AL MAXIMO SOPORTADO POR LA ACTUAL GANADORA*/
								BEGIN
									/*LA ACTUAL GANADORA NO PUEDE SUPERAR A LA NUEVA OFERTA -- NO PUEDE PUJAR MAS Y SE QUEDA ESTANCADO */
									SET @V_GANADOR_SUBASTA = 1
									/*UPDATE KO_OFERTA SET PRECIO_BASE=@V_MONTO_MAXIMO_VIGENTE WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE */
									/*UPDATE KO_OFERTA SET PRECIO_BASE=@V_MONTO_MAXIMO_VIGENTE-@V_INC_SUBASTA WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE*/
								END
									/*LA ACTUAL GANADORA PUEDE SUPERAR A LA NUEVA OFERTA*/
                                SET @V_GANADOR_SUBASTA = 0
                                UPDATE KO_OFERTA SET PRECIO_BASE=@K_PRECIO_BASE+@V_INC_SUBASTA WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE
							END ELSE
							BEGIN
								SET @V_GANADOR_SUBASTA =1 /*ES EL NUEVO GANADOR DE SUBASTA*/
							END
						IF (@V_GANADOR_SUBASTA = 1 )
						BEGIN
							UPDATE KO_OFERTA SET GANADOR_SUBASTA=0 WHERE ID_AVISO = @K_ID_AVISO AND GANADOR_SUBASTA=1; /*LA NUEVA OFERTA ES LA GANADORA*/
                            /*GANADORES Y PERDEDORES*/
                            SET @V_GANADOR = @K_ID_USR
                          SET @V_PERDEDOR = @V_GANADOR_VIGENTE
						END ELSE
  BEGIN
                            /*GANADORES Y PERDEDORES*/
                            SET @V_GANADOR = @V_GANADOR_VIGENTE
                            SET @V_PERDEDOR = @K_ID_USR
                        END

						INSERT INTO KO_OFERTA
						(
							FEC_REG,
							CANT,
							PRECIO_BASE,
							EST,
							ID_AVISO,
							ID_USR,
							TIPO_COMISION,
							VALOR_COMISION,
							VALOR_CAMBIO,
							ESAUTOMATICA_SUB,
							MONTO_MAXIMO,
							GANADOR_SUBASTA
						)
						VALUES
						(
							GETDATE(),
							@K_CANT,
							@K_PRECIO_BASE,
							@K_EST,
							@K_ID_AVISO,
							@K_ID_USR,
							@K_TIPO_COMISION,
							@K_VALOR_COMISION,
							@V_VALOR_CAMBIO,
							@K_ESAUTOMATICA_SUB,
							@K_MONTO_MAXIMO,
							@V_GANADOR_SUBASTA
						)
                        SET @V_ID_OFERTA = @@IDENTITY
					END
					ELSE IF  @K_ESAUTOMATICA_SUB=1 /*ACTUAL GANADOR ES OFERTA AUTOMATICA Y LA NUEVA OFERTA ES OFERTA AUTOMATICA*/
					BEGIN
						IF @V_MONTO_MAXIMO_VIGENTE=@K_MONTO_MAXIMO /*SI SON OFERTAS IGUALES GANA LA PRIMERA */
						BEGIN
							UPDATE KO_OFERTA SET GANADOR_SUBASTA=0 WHERE ID_AVISO = @K_ID_AVISO AND GANADOR_SUBASTA=1;
                            	     /*LA NUEVA OFERTA ES LA GANADORA*/
							/*UPDATE KO_OFERTA SET PRECIO_BASE=@V_MONTO_MAXIMO_VIGENTE WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE */
							/*UPDATE KO_OFERTA SET PRECIO_BASE=@V_MONTO_MAXIMO_VIGENTE - @V_INC_SUBASTA WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE*/
							INSERT INTO KO_OFERTA
							(
								FEC_REG,
								CANT,
								PRECIO_BASE,
								EST,
								ID_AVISO,
								ID_USR,
								TIPO_COMISION,
								VALOR_COMISION,
								VALOR_CAMBIO,
								ESAUTOMATICA_SUB,
								MONTO_MAXIMO,
								GANADOR_SUBASTA
							)
							VALUES
							(
								GETDATE(),
								@K_CANT,
								/*@V_MAYOR_PRECIO_BASE_VIGENTE, */
								@K_MONTO_MAXIMO,
								@K_EST,
								@K_ID_AVISO,
								@K_ID_USR,
								@K_TIPO_COMISION,
								@K_VALOR_COMISION,
								@V_VALOR_CAMBIO,
								@K_ESAUTOMATICA_SUB,
								@K_MONTO_MAXIMO,
								1
							)
                            SET @V_ID_OFERTA = @@IDENTITY
                            /*GANADORES Y PERDEDORES*/
                            SET @V_GANADOR = @K_ID_USR
                            SET @V_PERDEDOR = @V_GANADOR_VIGENTE
						END
						ELSE IF  @V_MONTO_MAXIMO_VIGENTE>@K_MONTO_MAXIMO /*LA OFERTA GANADORA ACTUAL TIENE UN MONTO MAYOR Q LA NUEVA OFERTA*/
						BEGIN
                            /*INCREMENTAMOS LA ACTUAL OFERTA GANADORA PARA QUE SUPERE A LA NUEVA */
							IF @K_MONTO_MAXIMO+@V_INC_SUBASTA>@V_MONTO_MAXIMO_VIGENTE
                                UPDATE KO_OFERTA SET PRECIO_BASE=@V_MONTO_MAXIMO_VIGENTE WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE
							ELSE
                                UPDATE KO_OFERTA SET PRECIO_BASE=@K_MONTO_MAXIMO+@V_INC_SUBASTA WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE
                            INSERT INTO KO_OFERTA
                                (
                                FEC_REG,
                                CANT,
                                PRECIO_BASE,
                                EST,
                                ID_AVISO,
                                ID_USR,
                                TIPO_COMISION,
                                VALOR_COMISION,
                                VALOR_CAMBIO,
                                ESAUTOMATICA_SUB,
                                MONTO_MAXIMO,
                                GANADOR_SUBASTA
                                )
                                VALUES
                                (
                                GETDATE(),
                                @K_CANT,
                                @V_MAYOR_PRECIO_BASE_VIGENTE,
                                @K_EST,
                                @K_ID_AVISO,
             @K_ID_USR,
                                @K_TIPO_COMISION,
                            @K_VALOR_COMISION,
                                @V_VALOR_CAMBIO,
                                @K_ESAUTOMATICA_SUB,
                                @K_MONTO_MAXIMO,
       0
                                )
                                SET @V_ID_OFERTA = @@IDENTITY
                                /*GANADORES Y PERDEDORES*/
                                SET @V_GANADOR = @V_GANADOR_VIGENTE
                                SET @V_PERDEDOR = @K_ID_USR
							END
							ELSE BEGIN /*LA NUEVA OFERTA SUPERA A LA OFERTA GANADORA ACTUAL*/
								UPDATE KO_OFERTA SET PRECIO_BASE=@V_MAYOR_PRECIO_BASE_VIGENTE WHERE ID_OFERTA=@V_ID_OFERTA_MAYOR_PRECIO_VIGENTE
								/*CALCULAMOS CON CUANTO INICIA LA PUJA DE LA NUEVA*/
								IF @V_MONTO_MAXIMO_VIGENTE+@V_INC_SUBASTA>@K_MONTO_MAXIMO
                                    SET @PRECIO_BASE_CAL=@K_MONTO_MAXIMO
								ELSE
                                    SET @PRECIO_BASE_CAL=@V_MONTO_MAXIMO_VIGENTE+@V_INC_SUBASTA

								UPDATE KO_OFERTA SET GANADOR_SUBASTA=0 WHERE ID_AVISO = @K_ID_AVISO AND GANADOR_SUBASTA=1; /*LA NUEVA OFERTA ES LA GANADORA*/
								INSERT INTO KO_OFERTA
								(
									FEC_REG,
									CANT,
									PRECIO_BASE,
									EST,
									ID_AVISO,
									ID_USR,
									TIPO_COMISION,
									VALOR_COMISION,
									VALOR_CAMBIO,
									ESAUTOMATICA_SUB,
									MONTO_MAXIMO,
									GANADOR_SUBASTA
								)
								VALUES
								(
								GETDATE(),
									@K_CANT,
									@PRECIO_BASE_CAL,
									@K_EST,
									@K_ID_AVISO,
									@K_ID_USR,
									@K_TIPO_COMISION,
									@K_VALOR_COMISION,
									@V_VALOR_CAMBIO,
									@K_ESAUTOMATICA_SUB,
									@K_MONTO_MAXIMO,
									1
								)
                                SET @V_ID_OFERTA = @@IDENTITY
                                /*GANADORES Y PERDEDORES*/
                                SET @V_GANADOR = @K_ID_USR
                                SET @V_PERDEDOR = @V_GANADOR_VIGENTE
							END
					END
					END
			END 		END
		SELECT 0 AS K_ERROR, '' AS K_MSG, @V_ID_OFERTA AS K_ID_OFERTA, @V_GANADOR AS K_GANADOR_SUBASTA, @V_PERDEDOR AS K_PERDEDOR_SUBASTA
		COMMIT
	END TRY

	BEGIN CATCH
		SELECT 1 AS K_ERROR, ERROR_MESSAGE() AS K_MSG
		ROLLBACK TRANSACTION
		RETURN
	END CATCH

  END
GO

ALTER PROCEDURE [dbo].[KO_SP_VENTAS_NO_ACTIVAS]
(
	@K_ID_USR BIGINT,
	@K_ID_CATEGORIA INT,
	@K_COD_FILTRO SMALLINT,
	@K_ESTADO SMALLINT,
	@K_TIPO_CONSULTA INT
)
AS
/**********************************************************
*Descripcion: Store Procedure que permite obtener un listado de las ventas(agrupados por categoria que no estan activas
*Fecha Crea: 18/02/2010
*Fecha Mod:  25/02/2010 [Wilder Carreño]
*Autor: Laura Mariños
*Versión: 1.0 (Kotear)
********************************************/

set nocount on
BEGIN
declare @SQL NVARCHAR(MAX),@SQLESTADO NVARCHAR(MAX),@SQLCATEGORIA NVARCHAR(MAX),@SQLGRUPO NVARCHAR(MAX)
DECLARE @V_HOY DATETIME = GETDATE();
IF @K_TIPO_CONSULTA=0
BEGIN

	SELECT
	av.ID_AVISO
	,AG.L1 ID_CATEGORIA
	,AG.L1_NOM CATEGORIA
	,DBO.KO_FN_RETURN_RUTA_IMAGEN(F.NOM,AV.ID_USR,AV.IMG_DEF) RUTA_IMAGEN
	,av.tit TIT
	,av.PRECIO
	,AV.VISITAS
	,AV.EST ESTADO
	,EA.DESCRIPCION DES_AVISO
	,AV.STOCK
	,DATEDIFF(DAY,AV.FEC_PUB+convert(int,d.DES),getdate()) CADUCIDAD
	,av.ID_USR
	,AV.ID_TIPO_AVISO
	,AV.FEC_PUB
	,(select top 1 D.ID_DESTAQUE from KO_AVISO_DESTAQUE   AVD
	inner join  KO_DESTAQUE  D on avd.ID_DESTAQUE=D.ID_DESTAQUE
	where  avd.ID_AVISO=AV.ID_AVISO and D.ID_TIPO_DESTAQUE=1 and avd.ACTIVO=1)  DESTAQUE_PRIN_ID
	,(select top 1 D.TIT from KO_AVISO_DESTAQUE  AVD
	inner join  KO_DESTAQUE as D on AVD.ID_DESTAQUE=D.ID_DESTAQUE
	where  AVD.ID_AVISO=AV.ID_AVISO and D.ID_TIPO_DESTAQUE=1 and avd.ACTIVO=1) DESTAQUE_PRIN_TIT
	,(select top 1 D.ID_DESTAQUE from KO_AVISO_DESTAQUE  AVD
	inner join  KO_DESTAQUE  D on avd.ID_DESTAQUE=D.ID_DESTAQUE
	where  avd.ID_AVISO=AV.ID_AVISO and D.ID_TIPO_DESTAQUE=2 and avd.ACTIVO=1)  DESTAQUE_LIST_ID
	,(select top 1 D.TIT from KO_AVISO_DESTAQUE   AVD
	inner join  KO_DESTAQUE as D on AVD.ID_DESTAQUE=D.ID_DESTAQUE
	where  AVD.ID_AVISO=AV.ID_AVISO and D.ID_TIPO_DESTAQUE=2 and avd.ACTIVO=1) DESTAQUE_LIST_TIT
	,mon.SIMB as SIMBOLO
	,KMP.MEDIOS_PAGO LIST_MEDIOPAGO
	,KF.FOTOS LIST_FOTO
	,DBO.KO_FN_RAMA_CATEGORIA (ac.ID_CATEGORIA) as RAMA_CATEGORIA
	,AV.ID_TIPO_PRODUCTO AS TIPOPRODUTO
	,AV.ID_MONEDA AS CODMONEDA
	,AV.ID_UBIGEO
	,D.DES AS DURACION
	,D.ID_DURACION
	,AV.REPUBLICADO
	,(SELECT COALESCE(SUM(OFC.CANT),0) FROM dbo.KO_OFERTA as OFC WHERE OFC.ID_AVISO=AV.ID_AVISO and (OFC.EST=1 or OFC.EST=5)) as COMPRAS
	,AV.HTML
	,av.SUBTIT
	, CASE WHEN ((AV.EST=16) AND (AV.FEC_FIN>=@V_HOY)) THEN 1 ELSE 0 END  PERMITE_ACTIVAR
	from
	KO_AVISO AV
	left JOIN KO_FOTO F ON F.ID_AVISO=AV.ID_AVISO AND F.PRIO=1
	inner join KO_AVISO_CATEGORIA ac on ac.ID_AVISO=av.ID_AVISO
	inner join KO_CATEGORIA cat on cat.ID_CATEGORIA=ac.ID_CATEGORIA
	inner join KO_AGRUPADOR ag on ag.ID_CATEGORIA=cat.ID_CATEGORIA
	inner join KO_TIPO_AVISO_DURACION ad on ad.ID_DURACION=av.ID_DURACION and ad.ID_TIPO_AVISO=av.ID_TIPO_AVISO
	inner join KO_DURACION d on d.ID_DURACION=ad.ID_DURACION
	inner join KO_ESTADO_AVISO EA on EA.ID_ESTADO_AVISO=AV.EST
	inner join KO_MONEDA  mon on AV.ID_MONEDA = mon.ID_MONEDA
	INNER JOIN VW_MEDIOSPAGO_AVISO KMP ON KMP.ID_AVISO=AV.ID_AVISO
	INNER JOIN VW_FOTOS_AVISO KF ON KF.ID_AVISO=AV.ID_AVISO
	WHERE av.ID_USR=CONVERT(VARCHAR,@K_ID_USR)
	AND (av.EST NOT IN (1,2,6,7,10,14,15,12)
	OR ((AV.EST=1 or AV.EST=2) and FLAG_MODERACION=1))
	AND CASE WHEN @K_ID_CATEGORIA<>0
	    THEN CASE WHEN AG.L1=CONVERT(VARCHAR,@K_ID_CATEGORIA) THEN 1 ELSE 0 END
	    ELSE 1
	    END =1
	AND CASE WHEN @K_ESTADO<>0
	    THEN CASE WHEN @K_ESTADO=100
	         THEN CASE WHEN ((AV.EST=1 or AV.EST=2) and FLAG_MODERACION=1) THEN 1 ELSE 0 END
	         ELSE CASE WHEN AV.EST= CONVERT(VARCHAR,@K_ESTADO) THEN 1 ELSE 0 END
	         END
	    ELSE 1 END = 1
	AND CASE @K_COD_FILTRO
	    WHEN 0 THEN 1
    	    WHEN 2 THEN CASE WHEN av.ID_TIPO_AVISO=1 THEN 1 ELSE 0 END
    	    WHEN 3 THEN CASE WHEN av.ID_TIPO_AVISO=2 THEN 1 ELSE 0 END
    	    WHEN 4 THEN CASE WHEN DATEDIFF(DAY,AV.FEC_PUB,GETDATE())<7 THEN 1 ELSE 0 END
    	    WHEN 5 THEN CASE WHEN DATEDIFF(DAY,AV.FEC_PUB,GETDATE())<30 THEN 1 ELSE 0 END
	    ELSE 0
	    END = 1
	order by ag.L1_NOM
	RETURN

END
ELSE IF @K_TIPO_CONSULTA=1
BEGIN

	SELECT
		AG.L1 ID_CATEGORIA,
		AG.L1_NOM CATEGORIA
	from
		KO_AVISO AV
		left JOIN KO_FOTO F ON F.ID_AVISO=AV.ID_AVISO AND F.PRIO=1
		inner join KO_AVISO_CATEGORIA ac on ac.ID_AVISO=av.ID_AVISO
		inner join KO_CATEGORIA cat on cat.ID_CATEGORIA=ac.ID_CATEGORIA
		inner join KO_AGRUPADOR ag on ag.ID_CATEGORIA=cat.ID_CATEGORIA
		inner join KO_TIPO_AVISO_DURACION ad on ad.ID_DURACION=av.ID_DURACION and ad.ID_TIPO_AVISO=av.ID_TIPO_AVISO
		inner join KO_DURACION d on d.ID_DURACION=ad.ID_DURACION
		where (av.EST NOT IN (1,2,6,7,10,14,15,12) or ((AV.EST=1 or AV.EST=2) and FLAG_MODERACION=1))
		and av.ID_USR= CONVERT(VARCHAR,@K_ID_USR)
		AND CASE WHEN @K_ESTADO<>0
		    THEN CASE WHEN AV.EST= CONVERT(VARCHAR,@K_ESTADO) THEN 1 ELSE 0 END
		    ELSE 1
		    END = 1
		group by AG.L1,AG.L1_NOM order by ag.L1_NOM
	RETURN
	end

END
GO

ALTER PROCEDURE [dbo].[KO_SP_AVISO_VENTAS_ACTIVAS_SEL] (
	@K_ID_AVISO BIGINT,
	@K_NUM_REG INT
)
AS
/*******************************************************
*Descripcion:
*Fecha Crea:
*Fecha Mod:
*Autor: Wilder Carreño
*Paremetros:
*Respuesta generada:
*Valores de retorno:
*Versión: 1.0 (Kotear)
********************************************************/
SET NOCOUNT ON
BEGIN

DECLARE @V_ID_USR BIGINT = (SELECT ID_USR FROM KO_AVISO WHERE ID_AVISO = @K_ID_AVISO)
	DECLARE @V_ID_CATEGORIA INT = (SELECT ID_CATEGORIA FROM dbo.KO_AVISO_CATEGORIA WHERE ID_AVISO=@K_ID_AVISO)
	SELECT  TOP (@K_NUM_REG)
	KA.ID_AVISO,
	DBO.KO_FN_RETURN_RUTA_IMAGEN(KF.NOM,KA.ID_USR,KA.IMG_DEF) RUTA_IMAGEN,
	KA.TIT,
	KA.PRECIO,
	KM.SIMB
	FROM KO_AVISO KA
	INNER JOIN KO_MONEDA KM ON KM.ID_MONEDA=KA.ID_MONEDA
	INNER JOIN KO_FOTO KF ON KF.ID_AVISO=KA.ID_AVISO
	INNER JOIN KO_AVISO_CATEGORIA KAC ON KA.ID_AVISO = KAC.ID_AVISO
	INNER JOIN KO_CATEGORIA KC ON KAC.ID_CATEGORIA = KC.ID_CATEGORIA
	WHERE
		KF.PRIO=1
		AND KA.ID_AVISO<>@K_ID_AVISO
		AND KA.ID_USR=@V_ID_USR
		AND (KA.EST=1 OR KA.EST=2)
		AND CASE WHEN dbo.KO_FN_IS_ADULTO(@V_ID_CATEGORIA)=1
				THEN 1
				ELSE CASE WHEN KC.ADULTO=0 THEN 1 ELSE 0 END
				END = 1
	ORDER BY CHECKSUM(NEWID())

END
GO



ALTER procedure [dbo].[KO_SP_AVISO_PREGUNTA_RESPUESTA_QRY]
(
@K_ID_AVISO bigint
)

as
/*****************************************************
*Descripcion: Store Procedure que permite obtener una lista con la preguntas y respuestas de un aviso en particular.
*Fecha Crea: 17/02/2010
*Fecha Mod:
*Parametros: @ID_AVISO: Indica el aviso del cual se obtendran sus preguntas y respuestas.

*  …
*Autor: Laura Mariños
*Versión: 1.0 (Kotear)
***************************************/
set nocount on

begin
select  CONVERT (VARCHAR,m.FEC_CREA,103)+' '+SUBSTRING(CONVERT(VARCHAR,m.FEC_CREA,108),1,5) AS FEC_CREA,
case when dm.ID_TIPO_MENSAJE=1 then 'P'
else 'R' end result,
dm.COMENT,
us.APODO,
m.ID_MENSAJE,
tus.DES,
US.ID_USR
from ko_mensaje m
inner join KO_DETALLE_MENSAJE dm on dm.ID_MENSAJE=m.ID_MENSAJE
inner join KO_USUARIO_PORTAL us on us.ID_USR=dm.ID_USR
inner join KO_TIPO_USUARIO tus on tus.ID_TIPO_USUARIO=us.ID_TIPO_USUARIO
where m.ID_REGISTRO=@K_ID_AVISO and m.ID_TABLA_MENSAJE=1 and dm.ID_TIPO_MENSAJE in (1,2)
order by m.FEC_CREA, m.ID_MENSAJE, RESULT
end

go

